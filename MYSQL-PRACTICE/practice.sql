CREATE DATABASE TEST;
USE TEST;
SHOW DATABASES;
-- STATIC VALUES
SELECT 'TODAY IS WEDNESDAY';
-- ARITHMETIC OPERATIONS
-- USING INBUILD ARITHMETIC OPERATIONS
SELECT PI();
SELECT 100+200;
SELECT MOD(45,7);
SELECT SQRT(25);
-- FETCH RECORDS FROM TABLE
USE SAKILA;
-- SELECT ALL COLUMNS AND ROWS
SELECT * FROM ACTOR;
SELECT * FROM SAKILA.ACTOR;
SELECT * FROM ACTOR ORDER BY FIRST_NAME;
SELECT * FROM ACTOR ORDER BY FIRST_NAME ASC;
SELECT * FROM ACTOR ORDER BY FIRST_NAME DESC;
-- SORT ORDER BY COLUMN NUMBER
SELECT * FROM ACTOR ORDER BY 1;
SELECT * FROM ACTOR ORDER BY 2 DESC;
-- FILTERING RECORDS
SELECT * FROM ACTOR WHERE FIRST_NAME = 'JULIA';
SELECT * FROM ACTOR WHERE ACTOR_ID < 3;
-- EMPTY RESULT SET
SELECT * FROM ACTOR WHERE FALSE;
SELECT * FROM ACTOR WHERE 1=2;
-- FUNCTIONS FOR NUMERIC OPERATIONS
SELECT ROUND(50.567);
SELECT ROUND(50.467);
SELECT ROUND(50.467,0);
SELECT ROUND(50.467,2);
SELECT ROUND(-1.23);
SELECT ROUND(-1.58);
SELECT ROUND(1.58);
SELECT ROUND(1.298,1);
SELECT ROUND(1.298,0);
SELECT ROUND(23.298,-1);
SELECT ROUND(2356.567,-2);
SELECT CEILING(1.2);
SELECT CEILING(1.7);
SELECT CEILING(1.8);
SELECT FLOOR(-1.2);
SELECT FLOOR(1.2);
-- STRING OPERATIONS
SELECT '1'+'1'; -- ARITHMETIC'
SELECT '1'+'ABC1';
SELECT CONCAT('1','ABC') AS 'CONTATENATED VALUE';

SELECT * FROM SAKILA. ACTOR;
SELECT FIRST_NAME, LAST_NAME, CONCAT(FIRST_NAME,LAST_NAME) FROM ACTOR;
SELECT FIRST_NAME, LAST_NAME, CONCAT(FIRST_NAME,' ',LAST_NAME) FROM ACTOR;
SELECT FIRST_NAME, LAST_NAME, CONCAT(FIRST_NAME,' ' ,LAST_NAME) FROM ACTOR;
-- GET THE INITIALS
USE SAKILA;
SELECT LAST_NAME, LEFT(LAST_NAME,1) FROM ACTOR;
SELECT CONCAT (FIRST_NAME, '.' , LEFT(LAST_NAME,1)) AS 'NAME WITH INITIALS' FROM ACTOR;
-- DATE OPERATIONS
USE SAKILA;
SELECT LAST_UPDATE FROM ACTOR;
SELECT DATE_FORMAT(LAST_UPDATE, 'XM,XD,XY') AS LAST_UPDATED FROM ACTOR;
-- DISTINCTS
USE SAKILA;
SELECT FIRST_NAME FROM ACTOR ORDER BY FIRST_NAME;
SELECT DISTINCT FIRST_NAME FROM ACTOR ORDER BY FIRST_NAME;
SELECT COUNT(*) FROM ACTOR;
SELECT COUNT(DISTINCT FIRST_NAME)FROM ACTOR;
select* from film ;
-- logical operator
-- AND
USE SAKILA;
SELECT * FROM ACTOR WHERE FIRST_NAME = 'KENETH';
-- USER STORY THE DETAILS OF NICK AND ED ARE NEEDED
USE SAKILA;
SELECT * FROM ACTOR WHERE FIRST_NAME = 'KENETH' OR FIRST_NAME = 'ED';
SELECT * FROM SAKILA.ACTOR WHERE FIRST_NAME = 'KENETH' AND ACTOR_ID< 100;
SELECT * FROM SAKILA.ACTOR WHERE FIRST_NAME = 'KENETH' AND ACTOR_ID< 100 AND LAST_NAME = 'TORN';
-- OR
USE SAKILA;
SELECT * FROM SAKILA.ACTOR WHERE FIRST_NAME = 'KENETH';
-- GET KENETH DETAILS AND ALL OTHER ACTORS WHOSE ID IS LESS THAN 100
USE SAKILA;
SELECT * FROM SAKILA.ACTOR WHERE FIRST_NAME = 'KENETH' AND ACTOR_ID< 100;
SELECT * FROM SAKILA.ACTOR WHERE FIRST_NAME = 'KENETH' AND ACTOR_ID< 100 OR LAST_NAME = 'TEMPLE';
-- NOT
USE SAKILA;
SELECT ACTOR_ID,FIRST_NAME,LAST_NAME FROM SAKILA.ACTOR WHERE NOT ACTOR_ID = 5;
SELECT ACTOR_ID,FIRST_NAME,LAST_NAME FROM SAKILA.ACTOR WHERE ACTOR_ID <> 5;
-- OR,AND,NOT EXAMPLES
USE SAKILA;
SELECT * FROM SAKILA.ACTOR WHERE FIRST_NAME = 'KENETH' AND ACTOR_ID <100 OR LAST_NAME = 'TEMPLE';
SELECT * FROM SAKILA.ACTOR WHERE FIRST_NAME = 'KENETH' OR LAST_NAME = 'TEMPLE' AND ACTOR_ID <100;
SELECT * FROM SAKILA.ACTOR WHERE (FIRST_NAME = 'KENETH' AND ACTOR_ID < 80) OR LAST_NAME = 'TEMPLE';
SELECT * FROM SAKILA.ACTOR WHERE FIRST_NAME = 'KENETH' AND (ACTOR_ID < 100 OR LAST_NAME = 'TEMPLE'); 
SELECT * FROM SAKILA.ACTOR WHERE (FIRST_NAME = 'KENETH' OR LAST_NAME = 'TEMPLE') AND ACTOR_ID < 100;
SELECT * FROM SAKILA.ACTOR WHERE FIRST_NAME = 'KENETH' OR (LAST_NAME = 'TEMPLE' AND ACTOR_ID < 100);
SELECT * FROM SAKILA.ACTOR WHERE (FIRST_NAME = 'KENETH' OR (LAST_NAME = 'TEMPLE' AND ACTOR_ID < 100));
SELECT * FROM SAKILA.ACTOR WHERE FIRST_NAME = 'KENETH'OR NOT (LAST_NAME ='TEMPLE' AND ACTOR_ID > 100);
-- CREATING TABLES
SELECT * FROM ACTORSAMPLE1;
DROP TABLE ACTORSAMPLE1;
CREATE TABLE ACTORSAMPLE1 ( ACTOR_ID SMALLINT NOT NULL, FIRST_NAME VARCHAR(50) NULL);
SELECT * FROM ACTORSAMPLE1;
INSERT INTO ACTORSAMPLE1 VALUES (1, 'RAMBO');
INSERT INTO ACTORSAMPLE1 VALUES (2, NULL);
INSERT INTO ACTORSAMPLE1 VALUES (NULL, 'JOHN');
-- PRIMARY KEY
SELECT * FROM ACTORSAMPLE2;
DROP TABLE ACTORSAMPLE2;
CREATE TABLE ACTORSAMPLE2 ( ACTOR_ID SMALLINT NOT NULL PRIMARY KEY, FIRST_NAME VARCHAR(50) NULL);
SELECT * FROM ACTORSAMPLE2;
INSERT INTO ACTORSAMPLE2 VALUES (1, 'RAMBO');
INSERT INTO ACTORSAMPLE2 VALUES (2, NULL);
INSERT INTO ACTORSAMPLE2 VALUES (NULL, 'JOHN');
INSERT INTO ACTORSAMPLE2 VALUES (3, 'RAMBO');
DESCRIBE ACTORSAMPLE2;
SELECT CURRENT_TIMESTAMP;
DROP TABLE ACTORSAMPLE2;

-- CREATE A TABLE
CREATE TABLE ACTORSAMPLE
(
actor_id SMALLINT NOT NULL AUTO_INCREMENT,
FIRST_NAME VARCHAR(50) NOT NULL,
last_name VARCHAR(50),
LAST_UPDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (ACTOR_ID)
);
-- INSERT ALL FIELDS
INSERT INTO ACTORSAMPLE VALUES (100, 'GAUTHAM', 'BUDDHA', '2021-01-04');
SELECT * FROM ACTORSAMPLE;
-- INSERT SPECIFIC FIELDS
INSERT INTO ACTORSAMPLE (FIRST_NAME,last_name,LAST_UPDATE) VALUES  ( 'KRISHNA', 'LORD', '2020-01-04');
INSERT INTO ACTORSAMPLE (FIRST_NAME,last_name,LAST_UPDATE) VALUES  ( 'RAMA', 'KRISHNA', '2020-01-03');
INSERT INTO ACTORSAMPLE (FIRST_NAME,last_name,LAST_UPDATE) VALUES  ( 'SITA', 'KRISHNA', '2020-01-05');
INSERT INTO ACTORSAMPLE VALUES  (100, 'GAUTHAM', 'BUDDHA', '2019-01-04');
INSERT INTO ACTORSAMPLE VALUES  (DEFAULT, 'GAUTHAM', 'BUDDHA', '2020-01-04');
INSERT INTO ACTORSAMPLE VALUES  (NULL, 'GAUTHAM', 'BUDDHA', '2020-01-04');
INSERT INTO ACTORSAMPLE VALUES  (DEFAULT, NULL, 'BUDDHAS', '2020-01-04');
-- INSERT A RECORD AND LET SQL AUTOMATICALLY ADD THE LAST_UPDATE
INSERT INTO ACTORSAMPLE (first_name,last_name) VALUES ('GOUTHAM','BUDHA');
-- JIONS
DROP TABLE TABLE1;
DROP TABLE TABLE2;
-- Create table 1
CREATE TABLE table1
(ID INT, Value VARCHAR(10));

-- UNION
SELECT 1 AS 'NUMBER','RED' AS 'COLOR'  
UNION   
SELECT 2,'GREEN'  
UNION ALL  
SELECT 1,'RED';  

SELECT TITLE FROM FILM
UNION
SELECT FIRST_NAME FROM ACTOR;

-- DIFFERENT WAY OF INSERTING RECORDS INTO A TABLE
INSERT INTO Table1 (ID, Value)
SELECT 1,'RED' 
UNION ALL 
SELECT 2,'GREEN' 
UNION ALL 
SELECT 3,'BLUE'; 

/* INSERT INTO Table1 (ID, Value)
SELECT 1,'First'
UNION ALL
SELECT 2,'Second'
UNION ALL
SELECT 3,'Third' */


-- Create table 2
CREATE TABLE table2
(ID INT, Value VARCHAR(10));
INSERT INTO Table2 (ID, Value)
SELECT 2,'BASKET'
UNION ALL
SELECT 3,'BASE'
UNION ALL
SELECT 6,'CRICKET'
UNION ALL
SELECT 7,'FOOT';

SELECT * FROM Table1 
UNION 
SELECT * FROM Table2; 

-- ----------- JOINS ----------------------
-- CROSS JION
SELECT * FROM Table1 CROSS JOIN TABLE2;
-- INNER JOIN
SELECT * FROM Table1  INNER JOIN TABLE2 
ON Table1.ID = Table2.ID; 
-- LEFT JOIN
SELECT * FROM Table1 LEFT JOIN TABLE2
ON Table1.ID = Table2.ID;
SELECT * FROM Table1 LEFT OUTER JOIN TABLE2
ON Table1.ID = Table2.ID;

-- RIGHT JOIN
SELECT * FROM Table1 
RIGHT JOIN TABLE2
ON Table1.ID = Table2.ID;

SELECT * FROM Table1 
RIGHT OUTER JOIN TABLE2
ON Table1.ID = Table2.ID;
SELECT TITLE, NAME FROM FILM
INNER JOIN LANGUAGE 
ON FILM.LANGUAGE_ID = LANGUAGE.LANGUAGE_ID;

SELECT TITLE, NAME FROM FILM, LANGUAGE 
WHERE FILM.LANGUAGE_ID = LANGUAGE.LANGUAGE_ID;

SELECT FIRST_NAME, TITLE FROM ACTOR
INNER JOIN FILM_ACTOR ON ACTOR.ACTOR_ID = FILM_ACTOR.ACTOR_ID
INNER JOIN FILM ON FILM_ACTOR.FILM_ID = FILM.FILM_ID;

-- CONSTRAINTS
-- PRIMARY KEY
CREATE TABLE NEWAUTHOR1
(AUT_ID CHAR(5) NOT NULL PRIMARY KEY, 
AUT_NAME VARCHAR(100) NOT NULL
);
insert into newauthor1 values (2,'MONK');
insert into newauthor1 values (1,'MONKS');
SELECT * FROM NEWAUTHOR1;
DROP TABLE NEWBOOK1;
-- FOREIGN KEY
CREATE TABLE NEWBOOK1(
BOOK_ID CHAR(5) NOT NULL PRIMARY KEY,
BOOK_NAME VARCHAR(50) NOT NULL,
AUT_ID CHAR(5),
FOREIGN KEY (AUT_ID) REFERENCES NEWAUTHOR1(AUT_ID)
);
DESCRIBE NEWAUTHOR1;
DESCRIBE NEWBOOK1;
SELECT * FROM NEWBOOK1;
insert into NEWBOOK1 values (1,'MONKS',3);
insert into NEWBOOK1 values (2,'MONKS',NULL);
insert into NEWBOOK1 values (3,'SKY',NULL);
insert into NEWBOOK1 values (1,'SKY',1);
insert into NEWBOOK1 values (10,'EARTH',1);
insert into NEWBOOK1 values (10,'SKY',2);
-- COMPOSITE PRIMARY KEY
CREATE TABLE EMPLOYEE_TEMP (
FNAME CHAR(10),
LNAME CHAR(10),
CITY CHAR(10),
PRIMARY KEY (FNAME, LNAME)
);
DESCRIBE EMPLOYEE_TEMP;
SELECT *FROM EMPLOYEE_TEMP;
INSERT INTO EMPLOYEE_TEMP VALUES ('MANI','SARVESH','CHENNAI');
INSERT INTO EMPLOYEE_TEMP VALUES ('MANI','SREEKANTH','CHENNAI');
INSERT INTO EMPLOYEE_TEMP VALUES ('MANI','SREEKANTH','CHENNAI');
-- ERROR-- DUPLICATE ENTRIES OF MANI & SREEKANTH FOR KEY EMPLOYEE_TEMP
   INSERT INTO EMPLOYEE_TEMP VALUES ('MANI','SARVESH','CHENNAI'); 
SELECT * FROM EMPLOYEE_TEMP;
CREATE TABLE EMPLOYEE_HOBBY (
FNAME CHAR(10),
LNAME CHAR(18),
HOBBY CHAR(10),
FOREIGN KEY (FNAME,LNAME) REFERENCES EMPLOYEE_TEMP(FNAME,LNAME)
);
DESCRIBE TABLE EMPLOYEE_HOBBY;
SELECT * FROM EMPLOYEE_HOBBY;
INSERT INTO EMPLOYEE_HOBBY VALUES ('MANI','SARVESH','CRICKET');
INSERT INTO EMPLOYEE_HOBBY VALUES ('MANI','SREEKANTH','READING');
INSERT INTO EMPLOYEE_HOBBY VALUES ('ELTON','PAVITHRA','MUSIC');
INSERT INTO EMPLOYEE_HOBBY VALUES ('BILLY','PAVITHRA','SKYDIVE');
-- FIND THE COUNT OF NUMBER OF TIMES EACH NAME REPEATS AND DISPLAY THE NAME AND COUNT.
-- GROUP BY
USE SAKILA;
SELECT FIRST_NAME FROM ACTOR;
SELECT COUNT(FIRST_NAME) FROM ACTOR;
SELECT COUNT(DISTINCT FIRST_NAME) FROM ACTOR;
SELECT FIRST_NAME, COUNT(FIRST_NAME) FROM ACTOR
GROUP BY FIRST_NAME
ORDER BY COUNT(FIRST_NAME);
SELECT * FROM ACTOR WHERE FIRST_NAME = 'JULIA';
SELECT * FROM FILM;
SELECT COUNT(*) FROM FILM;
SELECT COUNT(RENTAL_RATE) FROM FILM;
SELECT COUNT(RENTAL_RATE), SUM(RENTAL_RATE), MAX(RENTAL_RATE), MIN(RENTAL_RATE), AVG(RENTAL_RATE) FROM FILM;
SELECT SPECIAL_FEATURES FROM FILM;
SELECT SPECIAL_FEATURES, COUNT(SPECIAL_FEATURES) FROM FILM GROUP BY SPECIAL_FEATURES ORDER BY SPECIAL_FEATURES;

-- HAVING CLAUSE
-- FIND THE NAMES AND THE COUNT OF NUMBER OF TIMES EACH NAME REPEATS MORE THAN TWO TIMES.
-- SOLUTION
-- 1. FIND THE COUNT OF FIRST_NAME (COUNT AND GROUP BY)
SELECT FIRST_NAME FROM ACTOR WHERE FIRST_NAME LIKE 'C%';

SELECT FIRST_NAME, COUNT(FIRST_NAME) FROM ACTOR
WHERE FIRST_NAME NOT LIKE 'C%'
GROUP BY FIRST_NAME
HAVING COUNT(FIRST_NAME) > 1
ORDER BY COUNT(FIRST_NAME);

-- EMAIL ID CHECK EMAIL LIKE '%@%.%'











